# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: ChimOnCa CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: yml 값 세팅
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application.yml 
      env:
        spring.datasource.url: ${{ secrets.SPRING_DATASOURCE_URL }} 
        spring.datasource.username: ${{ secrets.SPRING_DATASOURCE_USERNAME }} 
        spring.datasource.password: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        spring.cloud.aws.region: ${{ secrets.AWS_REGION }}
        spring.cloud.aws.s3.bucekt: ${{ secrets.AWS_S3_BUCKET }}
        spring.cloud.aws.s3.access-key: ${{ secrets.AWS_S3_ACCESS_KEY }}
        spring.cloud.aws.s3.secret-key: ${{ secrets.AWS_S3_SECRET_KEY }}
        spring.cloud.aws.s3.prefix: ${{ secrets.AWS_S3_PREFIX }}
        jwt.secret: ${{ secrets.JWT_SECRET }}
        jwt.expiration: ${{ secrets.JWT_EXPIRATION }}
        jwt.refresh-expiration: ${{ secrets.JWT_REFRESH_EXPIRATION }}
        jwt.issuer: ${{ secrets.JWT_ISSUER }}
        management.server.port: ${{ secrets.MANAGEMENT_SERVER_PORT }}
        management.endpoints.web.exposure.include: ${{ secrets.MANAGEMENT_ENDPOINTS }}
        custom.monitoring.username: ${{ secrets.MONITORING_USERNAME }}
        custom.monitoring.password: ${{ secrets.MONITORING_PASSWORD }}
        custom.monitoring.role: ${{ secrets.MONITORING_ROLE }}

    - name: Gradle 명령 실행을 위한 권한을 부여합니다
      run: chmod +x gradlew

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build
    
    # 빌드 결과물 아티팩트 업로드
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: chimonca-jar
        path: build/libs/*.jar
        
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  # CD 작업
  deploy:
    # 'build' 성공 이후에 실행
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    # build에서 업로드한 아티팩트(jar 파일)를 다운로드합니다.
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: chimonca-jar

    # 다운로드 받은 jar 파일의 이름을 환경변수로 저장하여 다음 단계들에서 사용합니다.
    - name: Set Jar File Name
      id: get_jar_file
      run: echo "JAR_FILE=$(ls *.jar)" >> $GITHUB_ENV

    # AWS CLI를 사용하기 위해 자격 증명을 설정합니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 다운로드 받은 jar 파일을 S3 버킷으로 업로드합니다.
    - name: Upload to S3
      run: aws s3 cp ${{ env.JAR_FILE }} s3://${{ secrets.AWS_CICD_BUCKET }}/

    # EC2에 원격 접속하여 배포 스크립트를 실행합니다.
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          aws s3 cp s3://${{ secrets.AWS_CICD_BUCKET }}/${{ env.JAR_FILE }} /home/ec2-user/app/
          /home/ec2-user/app/deploy.sh
