# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: yml 값 세팅
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application.yml 
      env:
        spring.datasource.url: ${{ secrets.SPRING_DATASOURCE_URL }} 
        spring.datasource.username: ${{ secrets.SPRING_DATASOURCE_USERNAME }} 
        spring.datasource.password: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        spring.cloud.aws.region: ${{ secrets.AWS_REGION }}
        spring.cloud.aws.s3.bucekt: ${{ secrets.AWS_S3_BUCKET }}
        spring.cloud.aws.s3.access-key: ${{ secrets.AWS_S3_ACCESS_KEY }}
        spring.cloud.aws.s3.secret-key: ${{ secrets.AWS_S3_SECRET_KEY }}
        spring.cloud.aws.s3.prefix: ${{ secrets.AWS_S3_PREFIX }}
        jwt.secret: ${{ secrets.JWT_SECRET }}
        jwt.expiration: ${{ secrets.JWT_EXPIRATION }}
        jwt.refresh-expiration: ${{ secrets.JWT_REFRESH_EXPIRATION }}
        jwt.issuer: ${{ secrets.JWT_ISSUER }}
        management.server.port: ${{ secrets.MANAGEMENT_SERVER_PORT }}
        management.endpoints.web.exposure.include: ${{ secrets.MANAGEMENT_ENDPOINTS }}
        custom.monitoring.username: ${{ secrets.MONITORING_USERNAME }}
        custom.monitoring.password: ${{ secrets.MONITORING_PASSWORD }}
        custom.monitoring.role: ${{ secrets.MONITORING_ROLE }}
        

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
